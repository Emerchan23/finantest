[
  {
    "projectId": "442adfb0-017a-4446-ae1c-7576165b05b8",
    "testId": "8ee376bf-cfa8-43f9-8f12-d8bdb48cc2fe",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC001-health check api returns application status and timestamp",
    "description": "Verify that the GET /api/health endpoint returns a 200 status with a JSON object containing 'ok' as true and a valid timestamp string indicating the application is healthy.",
    "code": "import requests\nfrom datetime import datetime\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\n\ndef test_health_check_api_returns_application_status_and_timestamp():\n    url = f\"{BASE_URL}/api/health\"\n    try:\n        response = requests.get(url, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not a valid JSON\"\n\n    assert \"ok\" in data, \"'ok' field is missing in response JSON\"\n    assert data[\"ok\"] is True, \"'ok' field is not True\"\n\n    assert \"timestamp\" in data, \"'timestamp' field is missing in response JSON\"\n    timestamp_str = data[\"timestamp\"]\n    assert isinstance(timestamp_str, str), \"'timestamp' is not a string\"\n    try:\n        # Validate timestamp format by attempting to parse ISO 8601 string\n        datetime.fromisoformat(timestamp_str.replace(\"Z\", \"+00:00\"))\n    except ValueError:\n        assert False, f\"'timestamp' is not a valid ISO 8601 datetime string: {timestamp_str}\"\n\ntest_health_check_api_returns_application_status_and_timestamp()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T22:48:26.162Z",
    "modified": "2025-09-08T22:49:03.322Z"
  },
  {
    "projectId": "442adfb0-017a-4446-ae1c-7576165b05b8",
    "testId": "b7cedc7f-acce-4cc2-9bf9-305596b0a521",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC002-create new company with valid data",
    "description": "Test the POST /api/empresas endpoint to create a new company by sending valid company name data and verify the response contains a unique company id.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\n\ndef test_create_new_company_with_valid_data():\n    url = f\"{BASE_URL}/api/empresas\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    payload = {\n        \"nome\": \"Empresa Teste API\"\n    }\n    \n    response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n    \n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n    \n    json_response = response.json()\n    assert isinstance(json_response, dict), f\"Response JSON should be a dictionary but got {type(json_response)}\"\n    assert \"id\" in json_response, \"Response JSON does not contain 'id'\"\n    assert isinstance(json_response[\"id\"], str) and json_response[\"id\"].strip() != \"\", \"'id' should be a non-empty string\"\n\ntest_create_new_company_with_valid_data()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T22:48:26.168Z",
    "modified": "2025-09-08T22:48:50.008Z"
  },
  {
    "projectId": "442adfb0-017a-4446-ae1c-7576165b05b8",
    "testId": "fc2e322f-228c-44bd-b10b-16ca1322875c",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC003-list all companies for multi tenant support",
    "description": "Test the GET /api/empresas endpoint to retrieve a list of all companies ensuring the response is an array of company objects with id, name, and created_at fields.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\n\ndef test_list_all_companies():\n    url = f\"{BASE_URL}/api/empresas\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request to list companies failed: {e}\"\n\n    try:\n        companies = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(companies, list), \"Response is not a list\"\n\n    for company in companies:\n        assert isinstance(company, dict), \"Each company must be a dictionary\"\n        assert \"id\" in company, \"Company missing 'id' field\"\n        assert isinstance(company[\"id\"], str), \"'id' field must be a string\"\n        assert \"nome\" in company, \"Company missing 'nome' field\"\n        assert isinstance(company[\"nome\"], str), \"'nome' field must be a string\"\n        assert \"created_at\" in company, \"Company missing 'created_at' field\"\n        assert isinstance(company[\"created_at\"], str), \"'created_at' field must be a string\"\n\ntest_list_all_companies()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T22:48:26.174Z",
    "modified": "2025-09-08T22:48:53.161Z"
  },
  {
    "projectId": "442adfb0-017a-4446-ae1c-7576165b05b8",
    "testId": "009167a7-f120-4a83-a6a7-70e7350dfff4",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC004-create new client with complete details",
    "description": "Test the POST /api/clientes endpoint to create a new client with all required fields (name, document, address, phone, email) and verify the response returns the new client id.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3145\"\nCLIENTS_ENDPOINT = f\"{BASE_URL}/api/clientes\"\nHEADERS = {\n    \"Content-Type\": \"application/json\"\n}\nTIMEOUT = 30\n\ndef test_tc004_create_new_client_complete_details():\n    client_data = {\n        \"nome\": \"Cliente Teste Completo\",\n        \"documento\": \"12345678901\",\n        \"endereco\": \"Rua Exemplo, 123, SÃ£o Paulo, SP\",\n        \"telefone\": \"+55 11 91234-5678\",\n        \"email\": \"cliente.teste@example.com\"\n    }\n\n    try:\n        response = requests.post(CLIENTS_ENDPOINT, json=client_data, headers=HEADERS, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request to create client failed: {e}\"\n\n    try:\n        json_response = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert \"id\" in json_response, \"Response JSON does not contain 'id'\"\n    assert isinstance(json_response[\"id\"], str) and len(json_response[\"id\"]) > 0, \"Client 'id' is not a valid non-empty string\"\n\ntest_tc004_create_new_client_complete_details()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T22:48:26.179Z",
    "modified": "2025-09-08T22:48:51.185Z"
  },
  {
    "projectId": "442adfb0-017a-4446-ae1c-7576165b05b8",
    "testId": "d8855735-93e1-4f39-b219-78128b94ec82",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC005-list clients for current company with data isolation",
    "description": "Test the GET /api/clientes endpoint to list clients belonging only to the current company ensuring data isolation and correct client details in the response.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\nHEADERS = {\n    \"Content-Type\": \"application/json\"\n}\n\ndef create_company():\n    url = f\"{BASE_URL}/api/empresas\"\n    payload = {\n        \"nome\": f\"Test Company {uuid.uuid4()}\"\n    }\n    resp = requests.post(url, json=payload, headers=HEADERS, timeout=TIMEOUT)\n    resp.raise_for_status()\n    company_id = resp.json().get(\"id\")\n    assert isinstance(company_id, str) and len(company_id) > 0\n    return company_id\n\ndef delete_company(company_id):\n    url = f\"{BASE_URL}/api/empresas/{company_id}\"\n    # No delete endpoint defined in PRD, so if no delete supported, skip.\n    # Assuming it's not available, no action here.\n    pass\n\ndef create_client(client_data):\n    url = f\"{BASE_URL}/api/clientes\"\n    resp = requests.post(url, json=client_data, headers=HEADERS, timeout=TIMEOUT)\n    resp.raise_for_status()\n    client_id = resp.json().get(\"id\")\n    assert isinstance(client_id, str) and len(client_id) > 0\n    return client_id\n\ndef delete_client(client_id):\n    url = f\"{BASE_URL}/api/clientes/{client_id}\"\n    # No delete endpoint defined in PRD, so if no delete supported, skip.\n    # Assuming it's not available, no action here.\n    pass\n\ndef test_list_clients_for_current_company_with_data_isolation():\n    # Create a new company\n    company_id = None\n    client_id = None\n    try:\n        # Step 1: Create a new company - needed to isolate data (if possible)\n        # NOTE: PRD doesn't show how clients are linked by company explicitly in request,\n        # we assume the API uses authentication or some header to determine the current company context.\n        # Without authentication info, this test will create a client and verify it appears in the listing.\n\n        company_id = create_company()\n\n        # Step 2: Create a client belonging to the current company\n        client_data = {\n            \"nome\": f\"Client {uuid.uuid4()}\",\n            \"documento\": f\"12345678900\",\n            \"endereco\": \"Rua Teste, 123\",\n            \"telefone\": \"1234567890\",\n            \"email\": f\"testclient_{uuid.uuid4().hex}@example.com\"\n        }\n        client_id = create_client(client_data)\n\n        # Step 3: Call GET /api/clientes to list clients of current company\n        url = f\"{BASE_URL}/api/clientes\"\n        resp = requests.get(url, headers=HEADERS, timeout=TIMEOUT)\n        resp.raise_for_status()\n        clients = resp.json()\n        assert isinstance(clients, list)\n\n        # Step 4: Verify that the created client is in the list with correct details\n        matching_clients = [c for c in clients if c.get(\"id\") == client_id]\n        assert len(matching_clients) == 1\n        client_returned = matching_clients[0]\n\n        # Validate client fields\n        assert client_returned.get(\"nome\") == client_data[\"nome\"]\n        assert client_returned.get(\"documento\") == client_data[\"documento\"]\n        assert client_returned.get(\"endereco\") == client_data[\"endereco\"]\n        assert client_returned.get(\"telefone\") == client_data[\"telefone\"]\n        assert client_returned.get(\"email\") == client_data[\"email\"]\n        assert \"createdAt\" in client_returned and isinstance(client_returned[\"createdAt\"], str)\n\n        # Optional: Test data isolation by asserting no clients from other companies appear\n        # Since no cross-company clients creation available here and no auth, skipping.\n\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n    finally:\n        # Cleanup - Delete created client and company if API had delete endpoints.\n        # PRD did not specify deletes for clients or companies, so skipping.\n        pass\n\ntest_list_clients_for_current_company_with_data_isolation()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T22:48:26.185Z",
    "modified": "2025-09-08T22:49:12.404Z"
  },
  {
    "projectId": "442adfb0-017a-4446-ae1c-7576165b05b8",
    "testId": "2934aeb9-e2a8-440f-8261-01ae319cf4fa",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC006-create new product with valid attributes",
    "description": "Test the POST /api/produtos endpoint to create a new product with name, price, and category and verify the response returns the product id.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\nHEADERS = {\n    \"Content-Type\": \"application/json\"\n}\n\ndef test_create_new_product_with_valid_attributes():\n    url = f\"{BASE_URL}/api/produtos\"\n    payload = {\n        \"nome\": \"Produto Teste\",\n        \"preco\": 150.75,\n        \"categoria\": \"Categoria Teste\"\n    }\n\n    response = None\n    try:\n        response = requests.post(url, json=payload, headers=HEADERS, timeout=TIMEOUT)\n        response.raise_for_status()\n        data = response.json()\n\n        assert isinstance(data, dict), \"Response is not a JSON object\"\n        assert \"id\" in data, \"Response JSON does not contain 'id'\"\n        assert isinstance(data[\"id\"], str), \"'id' field is not a string\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\ntest_create_new_product_with_valid_attributes()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T22:48:26.191Z",
    "modified": "2025-09-08T22:48:52.202Z"
  },
  {
    "projectId": "442adfb0-017a-4446-ae1c-7576165b05b8",
    "testId": "1cbc98ad-a85d-4823-b396-8cb225125ed7",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC007-list products for current company with correct details",
    "description": "Test the GET /api/produtos endpoint to retrieve products for the current company ensuring the response includes product id, name, price, category, and creation date.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3145\"\nHEADERS = {\"Accept\": \"application/json\"}\nTIMEOUT = 30\n\ndef test_list_products_for_current_company_with_correct_details():\n    url = f\"{BASE_URL}/api/produtos\"\n    try:\n        response = requests.get(url, headers=HEADERS, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request to list products failed: {e}\"\n\n    try:\n        products = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(products, list), \"Response JSON is not a list\"\n\n    for product in products:\n        assert isinstance(product, dict), \"Product item is not a JSON object\"\n        assert \"id\" in product and isinstance(product[\"id\"], str), \"Product missing 'id' or not string\"\n        assert \"nome\" in product and isinstance(product[\"nome\"], str), \"Product missing 'nome' or not string\"\n        assert \"preco\" in product and (isinstance(product[\"preco\"], float) or isinstance(product[\"preco\"], int)), \"Product missing 'preco' or not a number\"\n        assert \"categoria\" in product and isinstance(product[\"categoria\"], str), \"Product missing 'categoria' or not string\"\n        assert \"created_at\" in product and isinstance(product[\"created_at\"], str), \"Product missing 'created_at' or not string\"\n\ntest_list_products_for_current_company_with_correct_details()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T22:48:26.197Z",
    "modified": "2025-09-08T22:49:03.312Z"
  },
  {
    "projectId": "442adfb0-017a-4446-ae1c-7576165b05b8",
    "testId": "c2c5c103-aa69-482c-a13a-994efd304a96",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC008-create new sale with linked client and product",
    "description": "Test the POST /api/vendas endpoint to create a new sale by providing client id, product id, quantity, unit price, and company id and verify the response returns the sale id.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\nHEADERS = {\"Content-Type\": \"application/json\"}\n\ndef create_company():\n    data = {\"nome\": f\"Test Company {uuid.uuid4()}\"}\n    resp = requests.post(f\"{BASE_URL}/api/empresas\", json=data, headers=HEADERS, timeout=TIMEOUT)\n    resp.raise_for_status()\n    company_id = resp.json().get(\"id\")\n    assert company_id, \"Failed to create company\"\n    return company_id\n\ndef delete_company(company_id):\n    requests.delete(f\"{BASE_URL}/api/empresas/{company_id}\", timeout=TIMEOUT)\n\ndef create_client():\n    data = {\n        \"nome\": f\"Test Client {uuid.uuid4()}\",\n        \"documento\": \"12345678900\",\n        \"endereco\": \"Rua Teste, 123\",\n        \"telefone\": \"+5511999999999\",\n        \"email\": f\"testclient{uuid.uuid4().hex[:6]}@example.com\"\n    }\n    resp = requests.post(f\"{BASE_URL}/api/clientes\", json=data, headers=HEADERS, timeout=TIMEOUT)\n    resp.raise_for_status()\n    client_id = resp.json().get(\"id\")\n    assert client_id, \"Failed to create client\"\n    return client_id\n\ndef delete_client(client_id):\n    requests.delete(f\"{BASE_URL}/api/clientes/{client_id}\", timeout=TIMEOUT)\n\ndef create_product():\n    data = {\n        \"nome\": f\"Test Product {uuid.uuid4()}\",\n        \"preco\": 99.99,\n        \"categoria\": \"Test Category\"\n    }\n    resp = requests.post(f\"{BASE_URL}/api/produtos\", json=data, headers=HEADERS, timeout=TIMEOUT)\n    resp.raise_for_status()\n    product_id = resp.json().get(\"id\")\n    assert product_id, \"Failed to create product\"\n    return product_id\n\ndef delete_product(product_id):\n    requests.delete(f\"{BASE_URL}/api/produtos/{product_id}\", timeout=TIMEOUT)\n\ndef delete_sale(sale_id):\n    requests.delete(f\"{BASE_URL}/api/vendas/{sale_id}\", timeout=TIMEOUT)\n\ndef test_create_new_sale_with_linked_client_and_product():\n    company_id = None\n    client_id = None\n    product_id = None\n    sale_id = None\n    try:\n        # Create company\n        company_id = create_company()\n\n        # Create client\n        client_id = create_client()\n\n        # Create product\n        product_id = create_product()\n\n        sale_data = {\n            \"cliente_id\": client_id,\n            \"produto_id\": product_id,\n            \"quantidade\": 2,\n            \"preco_unitario\": 99.99,\n            \"empresa_id\": company_id\n        }\n        response = requests.post(f\"{BASE_URL}/api/vendas\", json=sale_data, headers=HEADERS, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Unexpected status code: {response.status_code}\"\n        resp_json = response.json()\n        sale_id = resp_json.get(\"id\")\n        assert sale_id, \"Response JSON does not contain sale id\"\n    finally:\n        if sale_id:\n            delete_sale(sale_id)\n        if client_id:\n            delete_client(client_id)\n        if product_id:\n            delete_product(product_id)\n        if company_id:\n            delete_company(company_id)\n\ntest_create_new_sale_with_linked_client_and_product()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T22:48:26.204Z",
    "modified": "2025-09-08T22:49:02.506Z"
  },
  {
    "projectId": "442adfb0-017a-4446-ae1c-7576165b05b8",
    "testId": "817bcae6-4c5c-46b0-87ae-544d5824948b",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC009-list sales with related client product and company data",
    "description": "Test the GET /api/vendas endpoint to list sales ensuring each sale includes related client name, product name, company name, and correct sale details.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\nHEADERS = {\"Content-Type\": \"application/json\"}\n\ndef test_list_sales_with_related_data():\n    company_id = None\n    client_id = None\n    product_id = None\n    sale_id = None\n\n    try:\n        # 1. Create a company to isolate data\n        company_payload = {\"nome\": f\"Test Company {uuid.uuid4()}\"}\n        r = requests.post(f\"{BASE_URL}/api/empresas\", json=company_payload, headers=HEADERS, timeout=TIMEOUT)\n        r.raise_for_status()\n        company_id = r.json().get(\"id\")\n        assert company_id, \"Company ID should be present\"\n\n        # 2. Create a client linked to the company\n        client_payload = {\n            \"nome\": f\"Test Client {uuid.uuid4()}\",\n            \"documento\": \"12345678900\",\n            \"endereco\": \"Rua Teste, 123\",\n            \"telefone\": \"5591999999999\",\n            \"email\": f\"testclient{uuid.uuid4().hex[:8]}@example.com\"\n        }\n        r = requests.post(f\"{BASE_URL}/api/clientes\", json=client_payload, headers=HEADERS, timeout=TIMEOUT)\n        r.raise_for_status()\n        client_id = r.json().get(\"id\")\n        assert client_id, \"Client ID should be present\"\n\n        # 3. Create a product linked to the company\n        product_payload = {\n            \"nome\": f\"Test Product {uuid.uuid4()}\",\n            \"preco\": 99.99,\n            \"categoria\": \"Categoria Teste\"\n        }\n        r = requests.post(f\"{BASE_URL}/api/produtos\", json=product_payload, headers=HEADERS, timeout=TIMEOUT)\n        r.raise_for_status()\n        product_id = r.json().get(\"id\")\n        assert product_id, \"Product ID should be present\"\n\n        # 4. Create a sale with the client_id, product_id, and company_id\n        sale_payload = {\n            \"cliente_id\": client_id,\n            \"produto_id\": product_id,\n            \"quantidade\": 5,\n            \"preco_unitario\": 99.99,\n            \"empresa_id\": company_id\n        }\n        r = requests.post(f\"{BASE_URL}/api/vendas\", json=sale_payload, headers=HEADERS, timeout=TIMEOUT)\n        r.raise_for_status()\n        sale_id = r.json().get(\"id\")\n        assert sale_id, \"Sale ID should be present\"\n\n        # 5. List sales and verify the included data\n        r = requests.get(f\"{BASE_URL}/api/vendas\", headers=HEADERS, timeout=TIMEOUT)\n        r.raise_for_status()\n        sales = r.json()\n        assert isinstance(sales, list), \"Sales response should be a list\"\n        assert any(sale.get(\"id\") == sale_id for sale in sales), \"Created sale should be in the sales list\"\n\n        # Find the created sale in the list to verify related data\n        created_sale = next((s for s in sales if s.get(\"id\") == sale_id), None)\n        assert created_sale, \"Created sale details must be present\"\n\n        # Validate sale fields\n        assert created_sale.get(\"cliente_id\") == client_id, \"Sale cliente_id must match\"\n        assert created_sale.get(\"produto_id\") == product_id, \"Sale produto_id must match\"\n        assert created_sale.get(\"empresa_id\") == company_id, \"Sale empresa_id must match\"\n        assert isinstance(created_sale.get(\"quantidade\"), (int, float)), \"quantidade should be a number\"\n        assert isinstance(created_sale.get(\"preco_unitario\"), (int, float)), \"preco_unitario should be a number\"\n        assert isinstance(created_sale.get(\"total\"), (int, float)), \"total should be a number\"\n\n        # Validate related names presence and types\n        assert isinstance(created_sale.get(\"cliente_nome\"), str) and created_sale[\"cliente_nome\"], \"cliente_nome must be a non-empty string\"\n        assert isinstance(created_sale.get(\"produto_nome\"), str) and created_sale[\"produto_nome\"], \"produto_nome must be a non-empty string\"\n        assert isinstance(created_sale.get(\"empresa_nome\"), str) and created_sale[\"empresa_nome\"], \"empresa_nome must be a non-empty string\"\n\n    finally:\n        # Cleanup - delete the sale if possible\n        if sale_id:\n            try:\n                requests.delete(f\"{BASE_URL}/api/vendas/{sale_id}\", headers=HEADERS, timeout=TIMEOUT)\n            except Exception:\n                pass\n        # Cleanup - delete product\n        if product_id:\n            try:\n                requests.delete(f\"{BASE_URL}/api/produtos/{product_id}\", headers=HEADERS, timeout=TIMEOUT)\n            except Exception:\n                pass\n        # Cleanup - delete client\n        if client_id:\n            try:\n                requests.delete(f\"{BASE_URL}/api/clientes/{client_id}\", headers=HEADERS, timeout=TIMEOUT)\n            except Exception:\n                pass\n        # Cleanup - delete company\n        if company_id:\n            try:\n                requests.delete(f\"{BASE_URL}/api/empresas/{company_id}\", headers=HEADERS, timeout=TIMEOUT)\n            except Exception:\n                pass\n\n\ntest_list_sales_with_related_data()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T22:48:26.211Z",
    "modified": "2025-09-08T22:49:10.173Z"
  },
  {
    "projectId": "442adfb0-017a-4446-ae1c-7576165b05b8",
    "testId": "4b19a26b-464f-49c4-92c0-45f1f1285a9b",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC010-send email with valid smtp configuration",
    "description": "Test the POST /api/email/send endpoint to send an email with valid 'to', 'subject', and 'html' content and verify the response confirms successful email sending.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\n\ndef test_send_email_with_valid_smtp_configuration():\n    url = f\"{BASE_URL}/api/email/send\"\n    headers = {\"Content-Type\": \"application/json\"}\n    payload = {\n        \"to\": \"recipient@example.com\",\n        \"subject\": \"Test Email\",\n        \"html\": \"<h1>This is a test email</h1><p>Sent from ERP-BR automated test.</p>\"\n    }\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n        # Assuming successful send returns 200 and some confirmation in body\n        assert response.status_code == 200\n        content_type = response.headers.get('Content-Type', '')\n        assert \"application/json\" in content_type or \"text\" in content_type or \"html\" in content_type or content_type==\"\"\n        # If response is JSON, we can check for keys/values\n        try:\n            json_data = response.json()\n            assert isinstance(json_data, dict)\n        except Exception:\n            # If not JSON, just pass, as only 200 success is required\n            pass\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_send_email_with_valid_smtp_configuration()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 16, in test_send_email_with_valid_smtp_configuration\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 500 Server Error: Internal Server Error for url: http://localhost:3145/api/email/send\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 31, in <module>\n  File \"<string>\", line 29, in test_send_email_with_valid_smtp_configuration\nAssertionError: Request failed: 500 Server Error: Internal Server Error for url: http://localhost:3145/api/email/send\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T22:48:26.216Z",
    "modified": "2025-09-08T22:49:15.371Z"
  }
]
