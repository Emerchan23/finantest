[
  {
    "projectId": "dcf131b9-429d-435f-9625-ef884654beed",
    "testId": "15138eea-5ede-4149-9bbd-552a588c0c8b",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC001-health check api returns application status and timestamp",
    "description": "Verify that the GET /api/health endpoint returns a 200 status with a JSON object containing 'ok' as true and a valid timestamp string indicating the application is healthy.",
    "code": "import requests\nfrom datetime import datetime\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\n\ndef test_health_check_api_returns_application_status_and_timestamp():\n    url = f\"{BASE_URL}/api/health\"\n    try:\n        response = requests.get(url, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected status 200 but got {response.status_code}\"\n        json_data = response.json()\n        assert isinstance(json_data, dict), \"Response is not a JSON object\"\n        assert 'ok' in json_data, \"'ok' key missing in response\"\n        assert json_data['ok'] is True, \"'ok' is not True\"\n        assert 'timestamp' in json_data, \"'timestamp' key missing in response\"\n        # Validate timestamp is a valid ISO 8601 string\n        timestamp_str = json_data['timestamp']\n        try:\n            # Try parsing timestamp to datetime\n            parsed_timestamp = datetime.fromisoformat(timestamp_str.replace(\"Z\", \"+00:00\"))\n        except Exception:\n            assert False, f\"Timestamp '{timestamp_str}' is not a valid ISO 8601 string\"\n    except requests.RequestException as e:\n        assert False, f\"Request to health check API failed: {e}\"\n\ntest_health_check_api_returns_application_status_and_timestamp()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T23:15:49.156Z",
    "modified": "2025-09-08T23:16:10.509Z"
  },
  {
    "projectId": "dcf131b9-429d-435f-9625-ef884654beed",
    "testId": "1124d9cf-1816-4d9d-926d-7baa05522922",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC002-create new company with valid data",
    "description": "Test the POST /api/empresas endpoint to create a new company by sending valid company name data and verify the response contains a unique company id.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\n\ndef test_create_new_company_with_valid_data():\n    url = f\"{BASE_URL}/api/empresas\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    payload = {\n        \"nome\": \"Empresa Teste TC002\"\n    }\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n        data = response.json()\n        assert isinstance(data, dict), \"Response is not a JSON object\"\n        assert \"id\" in data, \"Response JSON does not contain 'id'\"\n        company_id = data[\"id\"]\n        assert isinstance(company_id, str) and company_id.strip() != \"\", \"Company ID is not a valid non-empty string\"\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_create_new_company_with_valid_data()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T23:15:49.162Z",
    "modified": "2025-09-08T23:16:11.392Z"
  },
  {
    "projectId": "dcf131b9-429d-435f-9625-ef884654beed",
    "testId": "3d108f33-f336-4ec9-8a34-c2e9c3065a7a",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC003-list all companies for multi tenant support",
    "description": "Test the GET /api/empresas endpoint to retrieve a list of all companies ensuring the response is an array of company objects with id, name, and created_at fields.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\n\ndef test_list_all_companies_multi_tenant_support():\n    url = f\"{BASE_URL}/api/empresas\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    try:\n        companies = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(companies, list), \"Response should be a list\"\n\n    for company in companies:\n        assert isinstance(company, dict), \"Each company should be an object\"\n        assert \"id\" in company, \"Company object missing 'id'\"\n        assert isinstance(company[\"id\"], str), \"'id' should be a string\"\n        assert \"nome\" in company, \"Company object missing 'nome'\"\n        assert isinstance(company[\"nome\"], str), \"'nome' should be a string\"\n        assert \"created_at\" in company, \"Company object missing 'created_at'\"\n        assert isinstance(company[\"created_at\"], str), \"'created_at' should be a string\"\n\ntest_list_all_companies_multi_tenant_support()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T23:15:49.167Z",
    "modified": "2025-09-08T23:16:15.201Z"
  },
  {
    "projectId": "dcf131b9-429d-435f-9625-ef884654beed",
    "testId": "2cb4be29-697a-47b5-b293-42a2918cb6d6",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC004-create new client with complete details",
    "description": "Test the POST /api/clientes endpoint to create a new client with all required fields (name, document, address, phone, email) and verify the response returns the new client id.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\nHEADERS = {\"Content-Type\": \"application/json\"}\n\ndef test_create_new_client_with_complete_details():\n    url = f\"{BASE_URL}/api/clientes\"\n    client_data = {\n        \"nome\": \"Cliente Teste Completo\",\n        \"documento\": \"12345678901\",\n        \"endereco\": \"Rua Exemplo, 123, Bairro Teste, Cidade Y\",\n        \"telefone\": \"+5511999998888\",\n        \"email\": \"cliente.teste@example.com\"\n    }\n    response = None\n    try:\n        response = requests.post(url, json=client_data, headers=HEADERS, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Unexpected status code: {response.status_code}\"\n        json_resp = response.json()\n        assert \"id\" in json_resp, \"Response JSON does not contain 'id'\"\n        assert isinstance(json_resp[\"id\"], str) and len(json_resp[\"id\"]) > 0, \"Invalid 'id' value\"\n    finally:\n        if response and response.status_code == 200:\n            client_id = response.json().get(\"id\")\n            if client_id:\n                # Attempt to delete created client to avoid test pollution\n                delete_url = f\"{BASE_URL}/api/clientes/{client_id}\"\n                try:\n                    del_resp = requests.delete(delete_url, headers=HEADERS, timeout=TIMEOUT)\n                    assert del_resp.status_code in (200, 204), \"Failed to delete test client after test\"\n                except Exception:\n                    pass\n\ntest_create_new_client_with_complete_details()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T23:15:49.173Z",
    "modified": "2025-09-08T23:16:16.717Z"
  },
  {
    "projectId": "dcf131b9-429d-435f-9625-ef884654beed",
    "testId": "30623407-8b20-445a-b67f-14bb99c9e91c",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC005-list clients for current company with data isolation",
    "description": "Test the GET /api/clientes endpoint to list clients belonging only to the current company ensuring data isolation and correct client details in the response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\nHEADERS = {\"Content-Type\": \"application/json\"}\n\n\ndef test_list_clients_data_isolation():\n    create_client_url = f\"{BASE_URL}/api/clientes\"\n    get_clients_url = create_client_url\n\n    # Sample client data to create a new client to ensure presence in the current company context\n    new_client_data = {\n        \"nome\": \"Client Data Isolation Test\",\n        \"documento\": \"12345678900\",\n        \"endereco\": \"Rua Teste, 123\",\n        \"telefone\": \"11999999999\",\n        \"email\": \"client.isolation@test.com\"\n    }\n\n    created_client_id = None\n    try:\n        # Create a new client to ensure at least one client for the current company\n        create_resp = requests.post(create_client_url, json=new_client_data, headers=HEADERS, timeout=TIMEOUT)\n        assert create_resp.status_code == 200, f\"Failed to create client: {create_resp.text}\"\n        create_resp_json = create_resp.json()\n        assert \"id\" in create_resp_json and isinstance(create_resp_json[\"id\"], str) and create_resp_json[\"id\"].strip(), \"Invalid client ID in creation response\"\n        created_client_id = create_resp_json[\"id\"]\n\n        # Get list of clients for current company\n        list_resp = requests.get(get_clients_url, headers=HEADERS, timeout=TIMEOUT)\n        assert list_resp.status_code == 200, f\"Failed to list clients: {list_resp.text}\"\n\n        clients = list_resp.json()\n        assert isinstance(clients, list), \"Clients response is not a list\"\n\n        # Find the created client in the list to assert data is correct\n        matching_clients = [c for c in clients if c.get(\"id\") == created_client_id]\n        assert len(matching_clients) == 1, \"Created client not found in clients list for current company\"\n\n        client = matching_clients[0]\n        # Validate client fields\n        expected_fields = [\"id\", \"nome\", \"documento\", \"endereco\", \"telefone\", \"email\", \"createdAt\"]\n        for field in expected_fields:\n            assert field in client, f\"Missing field '{field}' in client data\"\n\n        assert client[\"nome\"] == new_client_data[\"nome\"], \"Client 'nome' does not match\"\n        assert client[\"documento\"] == new_client_data[\"documento\"], \"Client 'documento' does not match\"\n        assert client[\"endereco\"] == new_client_data[\"endereco\"], \"Client 'endereco' does not match\"\n        assert client[\"telefone\"] == new_client_data[\"telefone\"], \"Client 'telefone' does not match\"\n        assert client[\"email\"] == new_client_data[\"email\"], \"Client 'email' does not match\"\n        # createdAt should be a non-empty string\n        assert isinstance(client[\"createdAt\"], str) and client[\"createdAt\"].strip(), \"Client 'createdAt' is invalid\"\n\n        # Check that all clients returned are from the current company by ensuring data isolation concept\n        # This might be inferred from the lack of clients with name or document drastically different, \n        # but since no authentication/tenant header or multi-company data is visible, the test focuses on existence and details.\n\n    finally:\n        # Cleanup: Delete the created client if possible\n        if created_client_id:\n            try:\n                delete_url = f\"{create_client_url}/{created_client_id}\"\n                del_resp = requests.delete(delete_url, headers=HEADERS, timeout=TIMEOUT)\n                # Deletion might not return 200, but we do not raise because this is cleanup\n            except Exception:\n                pass\n\n\ntest_list_clients_data_isolation()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T23:15:49.178Z",
    "modified": "2025-09-08T23:16:14.468Z"
  },
  {
    "projectId": "dcf131b9-429d-435f-9625-ef884654beed",
    "testId": "b288492d-761d-43c2-8e64-dd321eee50c1",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC006-create new product with valid attributes",
    "description": "Test the POST /api/produtos endpoint to create a new product with name, price, and category and verify the response returns the product id.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\n\n\ndef test_TC006_create_new_product_with_valid_attributes():\n    url = f\"{BASE_URL}/api/produtos\"\n    headers = {\"Content-Type\": \"application/json\"}\n    product_data = {\n        \"nome\": \"Produto Teste\",\n        \"preco\": 99.90,\n        \"categoria\": \"Categoria Teste\"\n    }\n    response = None\n    product_id = None\n    try:\n        response = requests.post(url, json=product_data, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n        json_resp = response.json()\n        assert isinstance(json_resp, dict), \"Response is not a JSON object\"\n        product_id = json_resp.get(\"id\")\n        assert product_id is not None and isinstance(product_id, str) and len(product_id) > 0, \"Response does not contain valid product id\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n    finally:\n        if product_id:\n            try:\n                del_response = requests.delete(f\"{url}/{product_id}\", timeout=TIMEOUT)\n                del_response.raise_for_status()\n            except requests.RequestException:\n                pass\n\n\ntest_TC006_create_new_product_with_valid_attributes()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T23:15:49.184Z",
    "modified": "2025-09-08T23:16:18.754Z"
  },
  {
    "projectId": "dcf131b9-429d-435f-9625-ef884654beed",
    "testId": "13caadf1-4b1b-40f2-9b39-09869246ac8c",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC007-list products for current company with correct details",
    "description": "Test the GET /api/produtos endpoint to retrieve products for the current company ensuring the response includes product id, name, price, category, and creation date.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\n\ndef test_list_products_for_current_company_with_correct_details():\n    url = f\"{BASE_URL}/api/produtos\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    data = response.json()\n    assert isinstance(data, list), \"Response should be a list\"\n\n    for product in data:\n        assert isinstance(product, dict), \"Each product should be an object\"\n        assert \"id\" in product, \"Product missing 'id'\"\n        assert isinstance(product[\"id\"], str), \"'id' should be a string\"\n        assert \"nome\" in product, \"Product missing 'nome'\"\n        assert isinstance(product[\"nome\"], str), \"'nome' should be a string\"\n        assert \"preco\" in product, \"Product missing 'preco'\"\n        assert isinstance(product[\"preco\"], (int, float)), \"'preco' should be a number\"\n        assert \"categoria\" in product, \"Product missing 'categoria'\"\n        assert isinstance(product[\"categoria\"], str), \"'categoria' should be a string\"\n        assert \"created_at\" in product, \"Product missing 'created_at'\"\n        assert isinstance(product[\"created_at\"], str), \"'created_at' should be a string\"\n\ntest_list_products_for_current_company_with_correct_details()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T23:15:49.189Z",
    "modified": "2025-09-08T23:16:26.943Z"
  },
  {
    "projectId": "dcf131b9-429d-435f-9625-ef884654beed",
    "testId": "f04ab574-e10e-43ce-b3d4-2820c3bb8c0c",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC008-create new sale with linked client and product",
    "description": "Test the POST /api/vendas endpoint to create a new sale by providing client id, product id, quantity, unit price, and company id and verify the response returns the sale id.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\n\ndef test_create_new_sale_with_linked_client_and_product():\n    headers = {\"Content-Type\": \"application/json\"}\n\n    # Step 1. Create a new company\n    company_payload = {\"nome\": f\"Test Company {uuid.uuid4()}\"}\n    company_response = requests.post(f\"{BASE_URL}/api/empresas\", json=company_payload, headers=headers, timeout=TIMEOUT)\n    assert company_response.status_code == 200, f\"Failed to create company: {company_response.text}\"\n    company_id = company_response.json().get(\"id\")\n    assert company_id, \"Company ID not returned\"\n\n    # Step 2. Create a new client linked to the company\n    client_payload = {\n        \"nome\": f\"Test Client {uuid.uuid4()}\",\n        \"documento\": \"12345678900\",\n        \"endereco\": \"Rua Teste, 123\",\n        \"telefone\": \"11999999999\",\n        \"email\": f\"client{uuid.uuid4()}@example.com\"\n    }\n    client_response = requests.post(f\"{BASE_URL}/api/clientes\", json=client_payload, headers=headers, timeout=TIMEOUT)\n    assert client_response.status_code == 200, f\"Failed to create client: {client_response.text}\"\n    client_id = client_response.json().get(\"id\")\n    assert client_id, \"Client ID not returned\"\n\n    # Step 3. Create a new product linked to the company\n    product_payload = {\n        \"nome\": f\"Test Product {uuid.uuid4()}\",\n        \"preco\": 99.90,\n        \"categoria\": \"Test Category\"\n    }\n    product_response = requests.post(f\"{BASE_URL}/api/produtos\", json=product_payload, headers=headers, timeout=TIMEOUT)\n    assert product_response.status_code == 200, f\"Failed to create product: {product_response.text}\"\n    product_id = product_response.json().get(\"id\")\n    assert product_id, \"Product ID not returned\"\n\n    # Step 4. Create a new sale with linked client id, product id, quantity, unit price, and company id\n    sale_payload = {\n        \"cliente_id\": client_id,\n        \"produto_id\": product_id,\n        \"quantidade\": 3,\n        \"preco_unitario\": 99.90,\n        \"empresa_id\": company_id\n    }\n\n    try:\n        sale_response = requests.post(f\"{BASE_URL}/api/vendas\", json=sale_payload, headers=headers, timeout=TIMEOUT)\n        assert sale_response.status_code == 200, f\"Failed to create sale: {sale_response.text}\"\n        sale_id = sale_response.json().get(\"id\")\n        assert sale_id, \"Sale ID not returned\"\n\n    finally:\n        # Cleanup created sale (if created)\n        if 'sale_id' in locals() and sale_id:\n            requests.delete(f\"{BASE_URL}/api/vendas/{sale_id}\", headers=headers, timeout=TIMEOUT)\n\n        # Cleanup created client\n        if client_id:\n            requests.delete(f\"{BASE_URL}/api/clientes/{client_id}\", headers=headers, timeout=TIMEOUT)\n\n        # Cleanup created product\n        if product_id:\n            requests.delete(f\"{BASE_URL}/api/produtos/{product_id}\", headers=headers, timeout=TIMEOUT)\n\n        # Cleanup created company\n        if company_id:\n            requests.delete(f\"{BASE_URL}/api/empresas/{company_id}\", headers=headers, timeout=TIMEOUT)\n\ntest_create_new_sale_with_linked_client_and_product()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T23:15:49.195Z",
    "modified": "2025-09-08T23:16:33.229Z"
  },
  {
    "projectId": "dcf131b9-429d-435f-9625-ef884654beed",
    "testId": "ad2680d0-662c-4027-a7e5-d292b18f818e",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC009-list sales with related client product and company data",
    "description": "Test the GET /api/vendas endpoint to list sales ensuring each sale includes related client name, product name, company name, and correct sale details.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\nHEADERS = {\"Content-Type\": \"application/json\"}\n\ndef test_list_sales_with_related_data():\n    # First create a company, client, product and a sale to ensure data exists for testing\n    company_id = None\n    client_id = None\n    product_id = None\n    sale_id = None\n\n    try:\n        # Create company\n        company_resp = requests.post(\n            f\"{BASE_URL}/api/empresas\",\n            json={\"nome\": \"Test Company for TC009\"},\n            headers=HEADERS,\n            timeout=TIMEOUT,\n        )\n        company_resp.raise_for_status()\n        company_data = company_resp.json()\n        company_id = company_data.get(\"id\")\n        assert isinstance(company_id, str) and company_id != \"\"\n\n        # Create client\n        client_payload = {\n            \"nome\": \"Client TC009\",\n            \"documento\": \"12345678901\",\n            \"endereco\": \"Rua Teste, 123\",\n            \"telefone\": \"11999999999\",\n            \"email\": \"clienttc009@example.com\"\n        }\n        client_resp = requests.post(\n            f\"{BASE_URL}/api/clientes\",\n            json=client_payload,\n            headers=HEADERS,\n            timeout=TIMEOUT,\n        )\n        client_resp.raise_for_status()\n        client_data = client_resp.json()\n        client_id = client_data.get(\"id\")\n        assert isinstance(client_id, str) and client_id != \"\"\n\n        # Create product\n        product_payload = {\n            \"nome\": \"Product TC009\",\n            \"preco\": 100.0,\n            \"categoria\": \"Categoria Teste\"\n        }\n        product_resp = requests.post(\n            f\"{BASE_URL}/api/produtos\",\n            json=product_payload,\n            headers=HEADERS,\n            timeout=TIMEOUT,\n        )\n        product_resp.raise_for_status()\n        product_data = product_resp.json()\n        product_id = product_data.get(\"id\")\n        assert isinstance(product_id, str) and product_id != \"\"\n\n        # Create sale\n        sale_payload = {\n            \"cliente_id\": client_id,\n            \"produto_id\": product_id,\n            \"quantidade\": 2,\n            \"preco_unitario\": 100.0,\n            \"empresa_id\": company_id\n        }\n        sale_resp = requests.post(\n            f\"{BASE_URL}/api/vendas\",\n            json=sale_payload,\n            headers=HEADERS,\n            timeout=TIMEOUT,\n        )\n        sale_resp.raise_for_status()\n        sale_data = sale_resp.json()\n        sale_id = sale_data.get(\"id\")\n        assert isinstance(sale_id, str) and sale_id != \"\"\n\n        # Now list sales and verify inclusion of related data\n        list_resp = requests.get(\n            f\"{BASE_URL}/api/vendas\",\n            headers=HEADERS,\n            timeout=TIMEOUT,\n        )\n        list_resp.raise_for_status()\n        sales_list = list_resp.json()\n        assert isinstance(sales_list, list) and len(sales_list) > 0\n\n        # Find the sale we just created\n        sale_found = None\n        for sale in sales_list:\n            if sale.get(\"id\") == sale_id:\n                sale_found = sale\n                break\n\n        assert sale_found is not None, \"Created sale not found in list\"\n\n        # Validate presence and correctness of all related fields\n        assert sale_found.get(\"cliente_id\") == client_id\n        assert sale_found.get(\"produto_id\") == product_id\n        assert sale_found.get(\"empresa_id\") == company_id\n\n        assert isinstance(sale_found.get(\"cliente_nome\"), str) and sale_found.get(\"cliente_nome\") != \"\"\n        assert isinstance(sale_found.get(\"produto_nome\"), str) and sale_found.get(\"produto_nome\") != \"\"\n        assert isinstance(sale_found.get(\"empresa_nome\"), str) and sale_found.get(\"empresa_nome\") != \"\"\n\n        # Validate sale details\n        assert isinstance(sale_found.get(\"quantidade\"), (int, float))\n        assert isinstance(sale_found.get(\"preco_unitario\"), (int, float))\n        assert isinstance(sale_found.get(\"total\"), (int, float))\n\n        # Check total correctness (quantity * unit price)\n        expected_total = sale_found[\"quantidade\"] * sale_found[\"preco_unitario\"]\n        assert abs(sale_found[\"total\"] - expected_total) < 0.01\n\n    finally:\n        # Cleanup created sale\n        if sale_id:\n            try:\n                requests.delete(f\"{BASE_URL}/api/vendas/{sale_id}\", headers=HEADERS, timeout=TIMEOUT)\n            except Exception:\n                pass\n\n        # Cleanup created client\n        if client_id:\n            try:\n                requests.delete(f\"{BASE_URL}/api/clientes/{client_id}\", headers=HEADERS, timeout=TIMEOUT)\n            except Exception:\n                pass\n\n        # Cleanup created product\n        if product_id:\n            try:\n                requests.delete(f\"{BASE_URL}/api/produtos/{product_id}\", headers=HEADERS, timeout=TIMEOUT)\n            except Exception:\n                pass\n\n        # Cleanup created company\n        if company_id:\n            try:\n                requests.delete(f\"{BASE_URL}/api/empresas/{company_id}\", headers=HEADERS, timeout=TIMEOUT)\n            except Exception:\n                pass\n\n\ntest_list_sales_with_related_data()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T23:15:49.200Z",
    "modified": "2025-09-08T23:16:26.192Z"
  },
  {
    "projectId": "dcf131b9-429d-435f-9625-ef884654beed",
    "testId": "6657785e-d5e3-4261-b68b-fb58eaa31f24",
    "userId": "c438a428-b001-709f-6182-0d4ed78bcd92",
    "title": "TC010-send email with valid smtp configuration",
    "description": "Test the POST /api/email/send endpoint to send an email with valid 'to', 'subject', and 'html' content and verify the response confirms successful email sending.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3145\"\nTIMEOUT = 30\n\ndef test_tc010_send_email_with_valid_smtp_configuration():\n    url = f\"{BASE_URL}/api/email/send\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    payload = {\n        \"to\": \"test@example.com\",\n        \"subject\": \"Test Email Subject\",\n        \"html\": \"<h1>This is a test email</h1><p>Sent during automated testing.</p>\"\n    }\n\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n\ntest_tc010_send_email_with_valid_smtp_configuration()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 19, in test_tc010_send_email_with_valid_smtp_configuration\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 500 Server Error: Internal Server Error for url: http://localhost:3145/api/email/send\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 21, in test_tc010_send_email_with_valid_smtp_configuration\nAssertionError: Request failed: 500 Server Error: Internal Server Error for url: http://localhost:3145/api/email/send\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-08T23:15:49.205Z",
    "modified": "2025-09-08T23:16:43.964Z"
  }
]
